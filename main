#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

char num[10] = {'o', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; //initial board

/*
    Check if there's a winner, draw, or game is still ongoing:
    - Return 1 if there's a winner.
    - Return 0 if it's a draw.
    - Return -1 if game is still ongoing.
*/
int win() {
    if (num[1] == num[2] && num[2] == num[3]) return 1;
    if (num[4] == num[5] && num[5] == num[6]) return 1;
    if (num[7] == num[8] && num[8] == num[9]) return 1;
    if (num[1] == num[4] && num[4] == num[7]) return 1;
    if (num[2] == num[5] && num[5] == num[8]) return 1;
    if (num[3] == num[6] && num[6] == num[9]) return 1;
    if (num[1] == num[5] && num[5] == num[9]) return 1;
    if (num[3] == num[5] && num[5] == num[7]) return 1;
    //check for draw
    for (int i = 1; i <= 9; i++) {
        if (num[i] != 'X' && num[i] != 'O'){
            return -1; //when game is still ongoing
        }
    }
    return 0; //for a draw
}

/*
set board position to its initial number but as a character ('1' to '9')
'0' + i converts integer i to the corresponding character:
'0' + 1 = '1', '0' + 2 = '2', ..., '0' + 9 = '9' etc
*/
void resetBoard(){
    for (int i = 1; i < 10; i++) {
        num[i] = '0' + i;
    }
}

/* Display the game board */
void game() {
    printf("\n\n\tTic Tac Toe\n\n");
    printf("Player 1 (X)  -  Player 2 (O)\n\n");
    printf("     |     |     \n");
    printf("  %c  |  %c  |  %c \n", num[1], num[2], num[3]);
    printf("_____|_____|_____\n");
    printf("     |     |     \n");
    printf("  %c  |  %c  |  %c \n", num[4], num[5], num[6]);
    printf("_____|_____|_____\n");
    printf("     |     |     \n");
    printf("  %c  |  %c  |  %c \n", num[7], num[8], num[9]);
    printf("     |     |     \n\n");
}

int main(){
    int player, choice, result;
    char mark, playAgain;
    do{
        resetBoard(); //start a new board
        player = 1;
        result = -1;

        //main game loop
        do{
            game();
            //ternary operators
            player = (player % 2)?1:2;
            mark = (player == 1)?'X':'O';

            //get valid input from the player
            int validMove = 0;  //flag to check if a valid move has been made
            while(!validMove){
                printf("Player %d, enter a number (1-9): ", player);
                if(scanf("%d", &choice) == 1 && choice >= 1 && choice <= 9 && num[choice] == '0' + choice) {
                    num[choice] = mark; //mark the cell with players symbol x/o
                    validMove = 1; //set flag to 1 to exit since a valid move waas made
                }else{
                    printf("Invalid move. Try again.\n");
                    while (getchar() != '\n'); //clear input to prevent infinite loop if invalid input was made
                }
            }

            result = win(); //check game status
            player++;
        }while(result==-1);

        game();
        if(result==1)
            printf("==> Player %d wins!\n", --player);
        else
            printf("==> Game draw\n");

        //ask if the user wants to play again
        printf("Play again? (y/n): ");
    do{
        while(getchar()!='\n'); // clear input buffer
        playAgain = getchar(); //get users response
        playAgain = tolower(playAgain); // convert input to lowercase to handle 'Y' or 'N'

        if(playAgain!='y' && playAgain!='n') {
            printf("Invalid input. Please enter 'y' for yes or 'n' for no: ");
        }
    }while(playAgain!='y' && playAgain!='n'); //repeat until valid input
}while (playAgain == 'y'); //repeat game if 'y'
    printf("Exiting...Thank you for playing!\n");
    return 0;

}
